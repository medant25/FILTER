/*
h коэффициенты фильтра;
n - длина импульсной характеристики фильтра;
X - вектор отсчетов входного (фильтруемого) сигнала;
nx - длина входного/выходного сигнала;
Y - вектор отсчетов выходного (отфильтрованного) сигнала;
z - вектор внутренего состояния фильтра;
*/

void Filter(const float *h, const float *X, float *Y, float *z, const int n, const int nx)
{
	for (int i = 0; i < nx; i++)
	{
		Y[i] = h[0] * X[i] + z[0];
		for (int j = 1; j < n; j++)
		{
			z[j - 1] = h[j] * X[i] + z[j];
		}
		z[n - 2] = h[n - 1] * X[i];
	}
}

int main()
{
	const int n = 9;
	float h[n] = { 1.78, -3.95, -1.492, 7.739, 1.7727, 7.739, -1.492, -3.95, 1.78 };	
	float z[n - 1] = { 0 };
	const int nx = 150;
	float X[nx] = { 20.6666666666667, -2.33333333333333, 2.66666666666667, -4.66666666666667, -15, -3.33333333333333, -22, 1.33333333333333, 24.3333333333333, -32.6666666666667, 9, 29.6666666666667, -13.3333333333333, 7.33333333333333, -18.3333333333333, 6.66666666666667, -19.6666666666667, 21.3333333333333, 11.6666666666667, -6, -14.6666666666667, 15.6666666666667, -9.66666666666667, 13, 31, 21.6666666666667, 30.3333333333333, -8.33333333333333, -30.3333333333333, -22, 28.3333333333333, -19.3333333333333, 21, -13, -18.6666666666667, 33.3333333333333, 5, 21.3333333333333, 23.3333333333333, -31.6666666666667, 5.33333333333333, -30.6666666666667, 12.3333333333333, 9, -2.66666666666667, 1.66666666666667, 3.33333333333333, -22.6666666666667, -5, 14.3333333333333, 21.3333333333333, -23.6666666666667, 8.33333333333333, 24.6666666666667, -0.333333333333333, 5, -32.6666666666667, -14.3333333333333, 27, 18.3333333333333, -6.66666666666667, 24.3333333333333, 3.33333333333333, 12, -20.6666666666667, -31.3333333333333, 20.6666666666667, 4, 17.3333333333333, 5, -27.6666666666667, 8, 11.6666666666667, 3, 19.6666666666667, -3, -28.6666666666667, -20.6666666666667, -13.6666666666667, -2.33333333333333, 28, 6, -7.66666666666667, -21.3333333333333, 17.3333333333333, 6, 7.66666666666667, -20, 3.66666666666667, -32.6666666666667, 7.33333333333333, 21.3333333333333, -8.66666666666667, -31.3333333333333, 6, 26, -5, -13, -10.3333333333333, -2, -16, 28.6666666666667, -12.6666666666667, 9.33333333333333, 24, 11.6666666666667, -9, -29.6666666666667, 32.6666666666667, -10.6666666666667, 26.3333333333333, 11.6666666666667, -12.3333333333333, -21.3333333333333, 26, 13, 23.3333333333333, -27.6666666666667, -33, -0.666666666666667, -15.3333333333333, -29.3333333333333, -24.6666666666667, 28, -14, 7.33333333333333, 33, -6.33333333333333, 4, -16.6666666666667, -13, 32.3333333333333, -29, 31.6666666666667, 27.3333333333333, 12.6666666666667, -30.3333333333333, 11.3333333333333, -13.3333333333333, -15, 29.6666666666667, -24.3333333333333, -23.6666666666667, 27, 23.6666666666667, 6, -17, 32, 3.33333333333333, 32 };
	float Y[nx] = { 0 };
	Filter(h, X, Y, z, n, nx);
}